options:
  parameters:
    author: yabool2001
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: mzemlo.pl@gmail.com
    description: Protocol Formatter tutorial 01
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Protocol_Formatter_tuto_01
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Protocol Formatter tutorial 01
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 4.0]
    rotation: 0
    state: enabled

blocks:
- name: access_key
  id: variable
  parameters:
    comment: 'HEX: F0 F0 AA AA

      DEC: 240 240 170 170'
    value: '''11110000111100001010101010101010'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1048, 52.0]
    rotation: 0
    state: enabled
- name: const_obj
  id: variable_constellation
  parameters:
    comment: ''
    const_points: '[-1-1j, -1+1j, 1+1j, 1-1j]'
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    npwr: '1'
    precision: '8'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 3, 2]'
    type: bpsk
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1696, 208.0]
    rotation: 0
    state: enabled
- name: header
  id: variable
  parameters:
    comment: ''
    value: digital.header_format_default(access_key, 0)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 52.0]
    rotation: 0
    state: enabled
- name: nfilts
  id: variable
  parameters:
    comment: ''
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 36.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [320, 36.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 36.0]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
    log_level: info
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 1164.0]
    rotation: 180
    state: enabled
- name: blocks_message_strobe_1
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: 'HEX: 0x13

      BIN: 0b00010011

      DEC: 19'
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.cons ( pmt.PMT_NIL , pmt.make_u8vector ( 1 , 0x13 ) )
    period: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 396.0]
    rotation: 0
    state: enabled
- name: blocks_pack_k_bits_bb_0
  id: blocks_pack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 968.0]
    rotation: 180
    state: enabled
- name: blocks_tagged_stream_mux_0
  id: blocks_tagged_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: Append header to payload
    lengthtagname: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    ninputs: '2'
    tag_preserve_head_pos: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 392.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1940.0, 576]
    rotation: 270
    state: enabled
- name: digital_constellation_decoder_cb_1_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: const_obj
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 968.0]
    rotation: 180
    state: enabled
- name: digital_constellation_modulator_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: const_obj
    differential: 'False'
    excess_bw: '0.35'
    log: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: sps
    truncate: 'False'
    verbose: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1592, 332.0]
    rotation: 0
    state: enabled
- name: digital_correlate_access_code_xx_ts_1_0
  id: digital_correlate_access_code_xx_ts
  parameters:
    access_code: access_key
    affinity: ''
    alias: ''
    comment: Correlates with access code to extract the payload.
    maxoutbuf: '0'
    minoutbuf: '0'
    tagname: '"packet_len"'
    threshold: '0'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 944.0]
    rotation: 180
    state: enabled
- name: digital_crc_append_0
  id: digital_crc_append
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    final_xor: '0xFFFFFFFF'
    initial_value: '0xFFFFFFFF'
    input_reflected: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_bits: '32'
    poly: '0x4C11DB7'
    result_reflected: 'True'
    skip_header_bytes: '0'
    swap_endianness: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 264.0]
    rotation: 0
    state: enabled
- name: digital_crc_check_0
  id: digital_crc_check
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    discard_crc: 'False'
    final_xor: '0xFFFFFFFF'
    initial_value: '0xFFFFFFFF'
    input_reflected: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_bits: '32'
    poly: '0x4C11DB7'
    result_reflected: 'True'
    skip_header_bytes: '0'
    swap_endianness: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 1192.0]
    rotation: 180
    state: enabled
- name: digital_pfb_clock_sync_xxx_0
  id: digital_pfb_clock_sync_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    filter_size: '32'
    init_phase: '16'
    loop_bw: '0.0628'
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    osps: '1'
    sps: sps
    taps: firdes.root_raised_cosine(nfilts, nfilts, 1.0/float(sps), 0.35, 11*sps*nfilts)
    type: ccf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1688, 944.0]
    rotation: 180
    state: enabled
- name: digital_protocol_formatter_bb_0
  id: digital_protocol_formatter_bb
  parameters:
    affinity: ''
    alias: ''
    comment: Generate header
    format: header
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 220.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass complex_sps_file_sink(gr.sync_block):\n    def __init__(self,\
      \ samp_rate=32000, sps=2, filename=\"complex_log.csv\"):\n        gr.sync_block.__init__(self,\n\
      \            name=\"Complex Sps File Sink\",\n            in_sig=[np.complex64],\n\
      \            out_sig=None)\n        self.filename = filename\n        self.samp_rate\
      \ = samp_rate\n        self.sps = sps\n        self.start_time = time.time()\n\
      \        self.sample_index = 0  # licznik pr\xF3bek\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;real;imag;symbol_index;samp_rate\\n\"\
      )\n\n    def work(self, input_items, output_items):\n        elapsed = time.time()\
      \ - self.start_time\n        for c in input_items[0]:\n            timestamp\
      \ = elapsed\n            ts = f\"{timestamp:.6f}\".replace('.', ',')\n     \
      \       re = f\"{c.real:.6f}\".replace('.', ',')\n            im = f\"{c.imag:.6f}\"\
      .replace('.', ',')\n            symbol_idx = str(self.sample_index // self.sps)\n\
      \            sr = f\"{self.samp_rate:.0f}\".replace('.', ',')\n\n          \
      \  self.f.write(f\"{ts};{re};{im};{symbol_idx};{sr}\\n\")\n\n            elapsed\
      \ += 1 / self.samp_rate\n            self.sample_index += 1\n\n        self.f.flush()\n\
      \        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"03_complex_tx_bpsk_mod_log.csv"'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    sps: sps
  states:
    _io_cache: ('Complex Sps File Sink', 'complex_sps_file_sink', [('samp_rate', '32000'),
      ('sps', '2'), ('filename', "'complex_log.csv'")], [('0', 'complex', 1)], [],
      '', ['filename', 'samp_rate', 'sps'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2088, 496.0]
    rotation: 0
    state: disabled
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass byte_logger(gr.sync_block):\n    def __init__(self, samp_rate=32000,\
      \ filename=\"byte_log.csv\"):\n        gr.sync_block.__init__(self,\n      \
      \      name=\"BYTE FILE SINK\",\n            in_sig=[np.uint8],\n          \
      \  out_sig=None)\n        self.filename = filename\n        self.samp_rate =\
      \ samp_rate\n        self.start_time = time.time()\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;byte;samp_rate\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        current_time = time.time()\n        elapsed\
      \ = current_time - self.start_time\n\n        for i, b in enumerate(input_items[0]):\n\
      \            timestamp = elapsed + (i / self.samp_rate)\n            ts = f\"\
      {timestamp:.6f}\".replace('.', ',')\n            val = str(b)\n            sr\
      \ = f\"{self.samp_rate:.0f}\".replace('.', ',')\n            self.f.write(f\"\
      {ts};{val};{sr}\\n\")\n\n        self.f.flush()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"04_byte_rx_log.csv"'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('BYTE FILE SINK', 'byte_logger', [('samp_rate', '32000'), ('filename',
      "'byte_log.csv'")], [('0', 'byte', 1)], [], '', ['filename', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 956.0]
    rotation: 180
    state: enabled
- name: epy_block_1_0_0
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass byte_logger(gr.sync_block):\n    def __init__(self, samp_rate=32000,\
      \ filename=\"byte_log.csv\"):\n        gr.sync_block.__init__(self,\n      \
      \      name=\"BYTE FILE SINK\",\n            in_sig=[np.uint8],\n          \
      \  out_sig=None)\n        self.filename = filename\n        self.samp_rate =\
      \ samp_rate\n        self.start_time = time.time()\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;byte;samp_rate\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        current_time = time.time()\n        elapsed\
      \ = current_time - self.start_time\n\n        for i, b in enumerate(input_items[0]):\n\
      \            timestamp = elapsed + (i / self.samp_rate)\n            ts = f\"\
      {timestamp:.6f}\".replace('.', ',')\n            val = str(b)\n            sr\
      \ = f\"{self.samp_rate:.0f}\".replace('.', ',')\n            self.f.write(f\"\
      {ts};{val};{sr}\\n\")\n\n        self.f.flush()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"01_byte_tx_log.csv"'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('BYTE FILE SINK', 'byte_logger', [('samp_rate', '32000'), ('filename',
      "'byte_log.csv'")], [('0', 'byte', 1)], [], '', ['filename', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 220.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0_0_0
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass byte_logger(gr.sync_block):\n    def __init__(self, samp_rate=32000,\
      \ filename=\"byte_log.csv\"):\n        gr.sync_block.__init__(self,\n      \
      \      name=\"BYTE FILE SINK\",\n            in_sig=[np.uint8],\n          \
      \  out_sig=None)\n        self.filename = filename\n        self.samp_rate =\
      \ samp_rate\n        self.start_time = time.time()\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;byte;samp_rate\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        current_time = time.time()\n        elapsed\
      \ = current_time - self.start_time\n\n        for i, b in enumerate(input_items[0]):\n\
      \            timestamp = elapsed + (i / self.samp_rate)\n            ts = f\"\
      {timestamp:.6f}\".replace('.', ',')\n            val = str(b)\n            sr\
      \ = f\"{self.samp_rate:.0f}\".replace('.', ',')\n            self.f.write(f\"\
      {ts};{val};{sr}\\n\")\n\n        self.f.flush()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"02_byte_tx_log.csv"'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('BYTE FILE SINK', 'byte_logger', [('samp_rate', '32000'), ('filename',
      "'byte_log.csv'")], [('0', 'byte', 1)], [], '', ['filename', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 236.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0_1
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass byte_logger(gr.sync_block):\n    def __init__(self, samp_rate=32000,\
      \ filename=\"byte_log.csv\"):\n        gr.sync_block.__init__(self,\n      \
      \      name=\"BYTE FILE SINK\",\n            in_sig=[np.uint8],\n          \
      \  out_sig=None)\n        self.filename = filename\n        self.samp_rate =\
      \ samp_rate\n        self.start_time = time.time()\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;byte;samp_rate\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        current_time = time.time()\n        elapsed\
      \ = current_time - self.start_time\n\n        for i, b in enumerate(input_items[0]):\n\
      \            timestamp = elapsed + (i / self.samp_rate)\n            ts = f\"\
      {timestamp:.6f}\".replace('.', ',')\n            val = str(b)\n            sr\
      \ = f\"{self.samp_rate:.0f}\".replace('.', ',')\n            self.f.write(f\"\
      {ts};{val};{sr}\\n\")\n\n        self.f.flush()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"03_byte_rx_log.csv"'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('BYTE FILE SINK', 'byte_logger', [('samp_rate', '32000'), ('filename',
      "'byte_log.csv'")], [('0', 'byte', 1)], [], '', ['filename', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 716.0]
    rotation: 180
    state: enabled
- name: pdu_pdu_to_tagged_stream_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 408.0]
    rotation: 0
    state: enabled
- name: pdu_tagged_stream_to_pdu_0
  id: pdu_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 1192.0]
    rotation: 180
    state: enabled
- name: qtgui_const_sink_x_0_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '"Tx constellation"'
    nconnections: '1'
    size: sps*8
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2048, 168.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"Tx Time"'
    nconnections: '1'
    size: 4*sps
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '2'
    ymin: '-2'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2112, 332.0]
    rotation: 0
    state: disabled

connections:
- [blocks_message_strobe_1, strobe, digital_crc_append_0, in]
- [blocks_pack_k_bits_bb_0, '0', epy_block_1_0, '0']
- [blocks_pack_k_bits_bb_0, '0', pdu_tagged_stream_to_pdu_0, '0']
- [blocks_tagged_stream_mux_0, '0', digital_constellation_modulator_0, '0']
- [blocks_tagged_stream_mux_0, '0', epy_block_1_0_0_0, '0']
- [blocks_throttle2_0, '0', digital_pfb_clock_sync_xxx_0, '0']
- [digital_constellation_decoder_cb_1_0, '0', digital_correlate_access_code_xx_ts_1_0,
  '0']
- [digital_constellation_modulator_0, '0', blocks_throttle2_0, '0']
- [digital_constellation_modulator_0, '0', epy_block_0_0, '0']
- [digital_constellation_modulator_0, '0', qtgui_const_sink_x_0_0, '0']
- [digital_constellation_modulator_0, '0', qtgui_time_sink_x_0_0, '0']
- [digital_correlate_access_code_xx_ts_1_0, '0', blocks_pack_k_bits_bb_0, '0']
- [digital_correlate_access_code_xx_ts_1_0, '0', epy_block_1_0_1, '0']
- [digital_crc_append_0, out, pdu_pdu_to_tagged_stream_0, pdus]
- [digital_crc_check_0, fail, blocks_message_debug_0, print]
- [digital_crc_check_0, ok, blocks_message_debug_0, print]
- [digital_pfb_clock_sync_xxx_0, '0', digital_constellation_decoder_cb_1_0, '0']
- [digital_protocol_formatter_bb_0, '0', blocks_tagged_stream_mux_0, '0']
- [digital_protocol_formatter_bb_0, '0', epy_block_1_0_0, '0']
- [pdu_pdu_to_tagged_stream_0, '0', blocks_tagged_stream_mux_0, '1']
- [pdu_pdu_to_tagged_stream_0, '0', digital_protocol_formatter_bb_0, '0']
- [pdu_tagged_stream_to_pdu_0, pdus, digital_crc_check_0, in]

metadata:
  file_format: 1
  grc_version: 3.10.12.0
