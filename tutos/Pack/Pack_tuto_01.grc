options:
  parameters:
    author: yabool2001
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: mzemlo.pl@gmail.com
    description: Pack tuto 01
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Pack_tuto_01
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Pack tuto 01
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 4.0]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 8.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 8.0]
    rotation: 0
    state: enabled
- name: blocks_message_strobe_1
  id: blocks_message_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: 'HEX: 0xAE

      DEC: 174

      BIN: 0b10101110'
    maxoutbuf: '0'
    minoutbuf: '0'
    msg: pmt.cons ( pmt.PMT_NIL , pmt.make_u8vector ( 1 , 0xAE ) )
    period: '1000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 240.0]
    rotation: 0
    state: enabled
- name: blocks_pack_k_bits_bb_0
  id: blocks_pack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: "When receiving 8 bytes\nat the input\nin the following time order: \
      \ \n0b00000001,  \n0b00000000,  \n0b00000001,  \n0b00000000,  \n0b00000001,\
      \  \n0b00000001,  \n0b00000001,  \n0b00000000,  \n\nit will process them\nas\
      \ MSB endianness\nand output a single byte:\n`0b10101110`."
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 248.0]
    rotation: 0
    state: enabled
- name: blocks_repack_bits_bb_0
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: 'For single-byte streams, select "Input" for the "Packet Alignment" parameter.

      In the case of a previously used "Pack K Bits" block, choose "MSB" endianness.

      Setting it to "LSB" results in 117 (`0b01110101`) instead of 174 (`0b10101110`).'
    endianness: gr.GR_MSB_FIRST
    k: '8'
    l: '1'
    len_tag_key: '""'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 568.0]
    rotation: 180
    state: enabled
- name: blocks_repack_bits_bb_0_0
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: 'For "Packet Alignment" set to

      Input and MSB andianness,

      it works the same as

      "Pack K Bits" with K=8.'
    endianness: gr.GR_MSB_FIRST
    k: '1'
    l: '8'
    len_tag_key: '""'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 568.0]
    rotation: 180
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 240.0]
    rotation: 0
    state: enabled
- name: blocks_unpack_k_bits_bb_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: 'When receiving 0b10101110

      at the input.


      It will output 8 bytes

      in MSB endianness

      in the following time order:

      0b00000001,

      0b00000000,

      0b00000001,

      0b00000000,

      0b00000001,

      0b00000001,

      0b00000001,

      0b00000000.'
    k: '8'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [528, 248.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0_0
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass byte_logger(gr.sync_block):\n    def __init__(self, samp_rate=32000,\
      \ filename=\"byte_log.csv\"):\n        gr.sync_block.__init__(self,\n      \
      \      name=\"BYTE FILE SINK\",\n            in_sig=[np.uint8],\n          \
      \  out_sig=None)\n        self.filename = filename\n        self.samp_rate =\
      \ samp_rate\n        self.start_time = time.time()\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;byte;samp_rate\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        current_time = time.time()\n        elapsed\
      \ = current_time - self.start_time\n\n        for i, b in enumerate(input_items[0]):\n\
      \            timestamp = elapsed + (i / self.samp_rate)\n            ts = f\"\
      {timestamp:.6f}\".replace('.', ',')\n            val = str(b)\n            sr\
      \ = f\"{self.samp_rate:.0f}\".replace('.', ',')\n            self.f.write(f\"\
      {ts};{val};{sr}\\n\")\n\n        self.f.flush()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '''01_byte_log.csv'''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('BYTE FILE SINK', 'byte_logger', [('samp_rate', '32000'), ('filename',
      "'byte_log.csv'")], [('0', 'byte', 1)], [], '', ['filename', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 160.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0_0_0
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass byte_logger(gr.sync_block):\n    def __init__(self, samp_rate=32000,\
      \ filename=\"byte_log.csv\"):\n        gr.sync_block.__init__(self,\n      \
      \      name=\"BYTE FILE SINK\",\n            in_sig=[np.uint8],\n          \
      \  out_sig=None)\n        self.filename = filename\n        self.samp_rate =\
      \ samp_rate\n        self.start_time = time.time()\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;byte;samp_rate\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        current_time = time.time()\n        elapsed\
      \ = current_time - self.start_time\n\n        for i, b in enumerate(input_items[0]):\n\
      \            timestamp = elapsed + (i / self.samp_rate)\n            ts = f\"\
      {timestamp:.6f}\".replace('.', ',')\n            val = str(b)\n            sr\
      \ = f\"{self.samp_rate:.0f}\".replace('.', ',')\n            self.f.write(f\"\
      {ts};{val};{sr}\\n\")\n\n        self.f.flush()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"02_unpack_8_bits_log.csv"'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('BYTE FILE SINK', 'byte_logger', [('samp_rate', '32000'), ('filename',
      "'byte_log.csv'")], [('0', 'byte', 1)], [], '', ['filename', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 160.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0_0_0_0
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass byte_logger(gr.sync_block):\n    def __init__(self, samp_rate=32000,\
      \ filename=\"byte_log.csv\"):\n        gr.sync_block.__init__(self,\n      \
      \      name=\"BYTE FILE SINK\",\n            in_sig=[np.uint8],\n          \
      \  out_sig=None)\n        self.filename = filename\n        self.samp_rate =\
      \ samp_rate\n        self.start_time = time.time()\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;byte;samp_rate\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        current_time = time.time()\n        elapsed\
      \ = current_time - self.start_time\n\n        for i, b in enumerate(input_items[0]):\n\
      \            timestamp = elapsed + (i / self.samp_rate)\n            ts = f\"\
      {timestamp:.6f}\".replace('.', ',')\n            val = str(b)\n            sr\
      \ = f\"{self.samp_rate:.0f}\".replace('.', ',')\n            self.f.write(f\"\
      {ts};{val};{sr}\\n\")\n\n        self.f.flush()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"03_byte_pack_8_bits_log.csv"'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('BYTE FILE SINK', 'byte_logger', [('samp_rate', '32000'), ('filename',
      "'byte_log.csv'")], [('0', 'byte', 1)], [], '', ['filename', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 160.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0_0_0_0_0
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass byte_logger(gr.sync_block):\n    def __init__(self, samp_rate=32000,\
      \ filename=\"byte_log.csv\"):\n        gr.sync_block.__init__(self,\n      \
      \      name=\"BYTE FILE SINK\",\n            in_sig=[np.uint8],\n          \
      \  out_sig=None)\n        self.filename = filename\n        self.samp_rate =\
      \ samp_rate\n        self.start_time = time.time()\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;byte;samp_rate\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        current_time = time.time()\n        elapsed\
      \ = current_time - self.start_time\n\n        for i, b in enumerate(input_items[0]):\n\
      \            timestamp = elapsed + (i / self.samp_rate)\n            ts = f\"\
      {timestamp:.6f}\".replace('.', ',')\n            val = str(b)\n            sr\
      \ = f\"{self.samp_rate:.0f}\".replace('.', ',')\n            self.f.write(f\"\
      {ts};{val};{sr}\\n\")\n\n        self.f.flush()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"04_repack_1_to_8_bytes_log.csv"'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('BYTE FILE SINK', 'byte_logger', [('samp_rate', '32000'), ('filename',
      "'byte_log.csv'")], [('0', 'byte', 1)], [], '', ['filename', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 656.0]
    rotation: 180
    state: enabled
- name: epy_block_1_0_0_0_0_1
  id: epy_block
  parameters:
    _source_code: "from gnuradio import gr\nimport numpy as np\nimport time\nimport\
      \ os\n\nclass byte_logger(gr.sync_block):\n    def __init__(self, samp_rate=32000,\
      \ filename=\"byte_log.csv\"):\n        gr.sync_block.__init__(self,\n      \
      \      name=\"BYTE FILE SINK\",\n            in_sig=[np.uint8],\n          \
      \  out_sig=None)\n        self.filename = filename\n        self.samp_rate =\
      \ samp_rate\n        self.start_time = time.time()\n\n        file_exists =\
      \ os.path.isfile(filename)\n        self.f = open(filename, \"w\", encoding=\"\
      utf-8\")\n\n        if not file_exists or os.stat(filename).st_size == 0:\n\
      \            self.f.write(\"timestamp;byte;samp_rate\\n\")\n\n    def work(self,\
      \ input_items, output_items):\n        current_time = time.time()\n        elapsed\
      \ = current_time - self.start_time\n\n        for i, b in enumerate(input_items[0]):\n\
      \            timestamp = elapsed + (i / self.samp_rate)\n            ts = f\"\
      {timestamp:.6f}\".replace('.', ',')\n            val = str(b)\n            sr\
      \ = f\"{self.samp_rate:.0f}\".replace('.', ',')\n            self.f.write(f\"\
      {ts};{val};{sr}\\n\")\n\n        self.f.flush()\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    filename: '"05_byte_pack_8_bits_log.csv"'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
  states:
    _io_cache: ('BYTE FILE SINK', 'byte_logger', [('samp_rate', '32000'), ('filename',
      "'byte_log.csv'")], [('0', 'byte', 1)], [], '', ['filename', 'samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 656.0]
    rotation: 180
    state: enabled
- name: pdu_pdu_to_tagged_stream_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 248.0]
    rotation: 0
    state: enabled

connections:
- [blocks_message_strobe_1, strobe, pdu_pdu_to_tagged_stream_0, pdus]
- [blocks_pack_k_bits_bb_0, '0', blocks_repack_bits_bb_0, '0']
- [blocks_pack_k_bits_bb_0, '0', epy_block_1_0_0_0_0, '0']
- [blocks_repack_bits_bb_0, '0', blocks_repack_bits_bb_0_0, '0']
- [blocks_repack_bits_bb_0, '0', epy_block_1_0_0_0_0_0, '0']
- [blocks_repack_bits_bb_0_0, '0', epy_block_1_0_0_0_0_1, '0']
- [blocks_throttle2_0, '0', blocks_pack_k_bits_bb_0, '0']
- [blocks_unpack_k_bits_bb_0, '0', blocks_throttle2_0, '0']
- [blocks_unpack_k_bits_bb_0, '0', epy_block_1_0_0_0, '0']
- [pdu_pdu_to_tagged_stream_0, '0', blocks_unpack_k_bits_bb_0, '0']
- [pdu_pdu_to_tagged_stream_0, '0', epy_block_1_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
